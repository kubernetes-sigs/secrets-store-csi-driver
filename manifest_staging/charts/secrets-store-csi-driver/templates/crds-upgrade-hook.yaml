apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ template "sscd.fullname" . }}-upgrade-crds
{{ include "sscd.labels" . | indent 2 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "1"
rules:
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ template "sscd.fullname" . }}-upgrade-crds
{{ include "sscd.labels" . | indent 2 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "1"
subjects:
  - kind: ServiceAccount
    name: {{ template "sscd.fullname" . }}-upgrade-crds
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ template "sscd.fullname" . }}-upgrade-crds
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: allow-upgrade-crds
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "1"
spec:
  fsGroup:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  volumes:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: allow-upgrade-crds-role
{{ include "sscd.labels" . | indent 2 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "1"
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs:     ['use']
  resourceNames:
  - allow-upgrade-crds
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: allow-upgrade-crds-role-binding
{{ include "sscd.labels" . | indent 2 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "1"
roleRef:
  kind: ClusterRole
  name: allow-upgrade-crds-role
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: {{ template "sscd.fullname" . }}-upgrade-crds
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "sscd.fullname" . }}-upgrade-crds
  namespace: {{ .Release.Namespace }}
{{ include "sscd.labels" . | indent 2 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "1"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "sscd.fullname" . }}-upgrade-crds
  namespace: {{ .Release.Namespace }}
{{ include "sscd.labels" . | indent 2 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "2"
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
spec:
  backoffLimit: 0
  template:
    metadata:
      name: {{ template "sscd.fullname" . }}-upgrade-crds
      {{- if .Values.linux.crds.annotations }}
      annotations:
        {{ toYaml .Values.linux.crds.annotations}}
      {{- end }}
    spec:
      serviceAccountName: {{ template "sscd.fullname" . }}-upgrade-crds
      restartPolicy: Never
      containers:
      - name: crds-upgrade
        image: "{{ .Values.linux.crds.image.repository }}:{{ .Values.linux.crds.image.tag }}"
        args:
        - apply
        - -f
        - crds/
        imagePullPolicy: {{ .Values.linux.crds.image.pullPolicy }}
      nodeSelector:
        kubernetes.io/os: linux
{{- if .Values.linux.nodeSelector }}
{{- toYaml .Values.linux.nodeSelector | nindent 8 }}
{{- end }}
{{- with .Values.linux.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
